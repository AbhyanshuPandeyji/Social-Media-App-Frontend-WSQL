// $themes - as an variable with - light and dark nested variable in it
// in sass we can nest the css variable and in those we can have a inside function like variable which will return
// the different key value pairs - it looks much different than css

$themes:(
    light:(
        textColor: #000,
        bg: white,
        logo: darkblue,
        bgSoft: #f6f3f3, 
        textColorSoft: #555,
        // border still has errors stupid mistake didn't have the comma in place
        border: lightgray,
    ),
    dark:(
        textColor: whitesmoke,
        bg: #222,
        logo: white,
        bgSoft: #333, 
        textColorSoft: lightgray,
        border: #444,
    ),
);


// @mixin - a predefined sass name
// themify - works as a function
// using $themes in this function as an variable , and utilizing it as to map over and work with it
@mixin themify($themes) {
    @each $theme, $map in $themes {
      .theme-#{$theme} & {
        $theme-map: () !global;
        @each $key, $submap in $map {
          $value: map-get(map-get($themes, $theme), "#{$key}");
          $theme-map: map-merge(
            $theme-map,
            (
              $key: $value,
            )
          ) !global;
        }
        @content;
        $theme-map: null !global;
      }
    }
  }
  
  @function themed($key) {
    @return map-get($theme-map, $key);
  }
  


// fro responsive design , we use this , rather than the index js global styling
// the upper ones work as variable to hold the value and to provide the access when imported  
// mobile and tablet act as a function , as themify worked before 
@mixin mobile {
    @media (max-width: 480px) {
      // content takes the value of the css - coming from the different file and giving back the response to them , after evaluating the result
      @content;
    }
  }
  @mixin tablet {
    @media (max-width: 960px) {
      @content;
    }
  }
  